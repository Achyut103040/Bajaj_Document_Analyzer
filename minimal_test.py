#!/usr/bin/env python3
"""
Minimal test for clause generation issue
"""

import os
import sys
import logging

# Set up logging to see what's happening
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

print("üîç MINIMAL CLAUSE TEST")
print("=" * 30)

# Test 1: Check if files exist
print("1. Checking files...")
datasets_path = "Datasets"
if os.path.exists(datasets_path):
    files = [f for f in os.listdir(datasets_path) if f.endswith('.pdf')]
    print(f"   ‚úÖ Found {len(files)} PDF files")
else:
    print(f"   ‚ùå No datasets found at {datasets_path}")
    sys.exit(1)

# Test 2: Try lightweight processor (simpler, no heavy models)
print("\n2. Testing lightweight processor...")
try:
    from lightweight_main import LightweightDocumentProcessor
    light_processor = LightweightDocumentProcessor()
    print("   ‚úÖ Lightweight processor initialized")
    
    # Load documents
    light_processor.load_documents(datasets_path)
    print(f"   ‚úÖ Loaded {len(light_processor.documents)} documents")
    print(f"   ‚úÖ Generated {len(light_processor.clause_database)} clauses")
    
    if light_processor.clause_database:
        # Test a simple query
        query = "knee surgery coverage"
        result = light_processor.process_query(query)
        print(f"   ‚úÖ Query processed: {result.get('decision')}")
        print(f"   ‚úÖ Clauses found: {len(result.get('clauses_mapping', []))}")
        
        if result.get('clauses_mapping'):
            print("   üéâ LIGHTWEIGHT PROCESSOR WORKS!")
        else:
            print("   ‚ö†Ô∏è No clauses mapped in response")
    else:
        print("   ‚ùå No clauses generated by lightweight processor")
        
except Exception as e:
    print(f"   ‚ùå Lightweight processor failed: {e}")

# Test 3: Try enhanced processor with timeout
print("\n3. Testing enhanced processor (with timeout)...")
try:
    import signal
    
    def timeout_handler(signum, frame):
        raise TimeoutError("Initialization timeout")
    
    # Set 30 second timeout
    signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(30)
    
    try:
        from enhanced_main import OptimizedDocumentProcessor
        enhanced_processor = OptimizedDocumentProcessor()
        signal.alarm(0)  # Cancel timeout
        print("   ‚úÖ Enhanced processor initialized")
        
        # Load documents
        enhanced_processor.load_documents(datasets_path)
        print(f"   ‚úÖ Loaded {len(enhanced_processor.documents)} documents")
        print(f"   ‚úÖ Generated {len(enhanced_processor.clause_database)} clauses")
        
        if enhanced_processor.clause_database:
            print("   üéâ ENHANCED PROCESSOR WORKS!")
        else:
            print("   ‚ùå No clauses generated by enhanced processor")
            
    except TimeoutError:
        signal.alarm(0)
        print("   ‚è∞ Enhanced processor initialization timed out")
    except Exception as e:
        signal.alarm(0)
        print(f"   ‚ùå Enhanced processor failed: {e}")

except ImportError:
    print("   ‚ö†Ô∏è Signal module not available (Windows), skipping timeout test")
    try:
        from enhanced_main import OptimizedDocumentProcessor
        print("   ‚úÖ Enhanced processor imported successfully")
    except Exception as e:
        print(f"   ‚ùå Enhanced processor import failed: {e}")

print("\n4. üèÅ Test complete!")
print("\nIf lightweight processor works but enhanced doesn't,")
print("the issue is likely with heavy model initialization in enhanced_main.py")
print("Consider using lightweight processor for now or optimizing model loading.")
